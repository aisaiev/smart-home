version: '3.6'
services:
  # Portainer CE
  portainer-ce:
    container_name: portainer
    image: portainer/portainer-ce
    restart: unless-stopped
    ports:
      - 8000:8000
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .docker/portainer-ce/data:/data

  # Nginx Proxy Manager
  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: jc21/nginx-proxy-manager:latest
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 81:81
    volumes:
      - .docker/nginx-proxy-manager/data:/data
      - .docker/nginx-proxy-manager/letsencrypt:/etc/letsencrypt

  # Home Assistant
  home-assistant:
    container_name: home-assistant
    image: ghcr.io/home-assistant/home-assistant:latest
    restart: unless-stopped
    volumes:
      - ./home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    env_file:
      - .env
    privileged: true
    network_mode: host

  # Duplicati
  duplicati:
    container_name: duplicati
    image: lscr.io/linuxserver/duplicati:latest
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - .docker/duplicati/config:/config
      - ./backups:/backups
      - .:/source
    ports:
      - 8200:8200

  # MQTT
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    ports:
      - 1883:1883
      - 9001:9001
    volumes:
      - .docker/mosquitto/data:/mosquitto/data
      - .docker/mosquitto/log:/mosquitto/log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  
  # Zigbee2MQTT
  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    restart: unless-stopped
    depends_on:
      - mosquitto
    env_file:
      - .env
    volumes:
      - /run/udev:/run/udev:ro
      - ./zigbee2mqtt:/app/data
    devices:
      - /dev/ttyUSB0:/dev/ttyACM0
    privileged: true
    network_mode: host

  # Matter
  matter-server:
    container_name: matter-server
    image: ghcr.io/home-assistant-libs/python-matter-server:stable
    restart: unless-stopped
    network_mode: host
    security_opt:
      - apparmor:unconfined
    volumes:
      - .docker/matter-server/data:/data/
      - /run/dbus:/run/dbus:ro

  # Eufy
  eufy-security-ws:
    container_name: eufy-security-ws
    image: bropat/eufy-security-ws
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 3003:3000
    environment:
      - USERNAME=${EUFY_USER}
      - PASSWORD=${EUFY_PASSWORD}
      - COUNTRY=${EUFY_COUNTRY}
    volumes:
      - .docker/eufy-security-ws/data:/data:rw

  # Scrypted
  scrypted:
    container_name: scrypted
    image: ghcr.io/koush/scrypted
    restart: unless-stopped
    network_mode: host
    env_file:
      - .env
    environment:
      - SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION=${SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION}
      - SCRYPTED_WEBHOOK_UPDATE=${SCRYPTED_WEBHOOK_UPDATE_URL}
    volumes:
      - ./scrypted/volume:/server/volume

  # Go2RTC
  go2rtc:
    container_name: go2rtc
    image: alexxit/go2rtc
    restart: unless-stopped
    network_mode: host
    privileged: true
    env_file:
      - .env
    volumes:
      - ./go2rtc:/config

  # MongoDB
  mongodb:
    container_name: mongodb
    build:
      context: ./mongo
    restart: unless-stopped
    environment:
      MONGO_REPLICA_HOST: 127.0.0.1
      MONGO_REPLICA_PORT: 27017
      MONGO_COMMAND: 'mongo'
    ports:
      - 27017:27017

  # ESPHome
  esphome:
    container_name: esphome
    image: ghcr.io/esphome/esphome
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./esphome:/config:rw
      - /etc/localtime:/etc/localtime:ro
    network_mode: host

  # Transmission
  transmission:
    container_name: transmission
    image: lscr.io/linuxserver/transmission:latest
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    volumes:
      - .docker/transmission/config:/config
      - ./media/downloads:/downloads
      - /media/anton/EMMC/downloads:/downloads2

  # Pi-hole
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - '${LOCAL_IP_ADDRESS}:53:53/tcp'
      - '${LOCAL_IP_ADDRESS}:53:53/udp'
      - '5300:80/tcp'
    env_file:
      - .env
    environment:
      WEBPASSWORD: ${PIHOLE_WEBPASSWORD}
    volumes:
      - .docker/pihole/etc-pihole:/etc/pihole
      - .docker/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    restart: unless-stopped

  # Cloudflare Tunnel
  solar-weather-station-cloudflared:
    container_name: solar-weather-station-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    env_file:
      - .env
    environment:
      - TUNNEL_TOKEN=${SOLAR_WEATHER_STATION_CLOUDFLARE_TUNNEL_TOKEN}

  # Cloudflare Tunnel
  maxar-map-cloudflared:
    container_name: maxar-map-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    env_file:
      - .env
    environment:
      - TUNNEL_TOKEN=${MAXAR_MAP_CLOUDFLARE_TUNNEL_TOKEN}

  # Cloudflare Tunnel
  find-your-wine-cloudflared:
    container_name: find-your-wine-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    env_file:
      - .env
    environment:
      - TUNNEL_TOKEN=${FIND_YOUR_WINE_CLOUDFLARE_TUNNEL_TOKEN}
